[{"/media/ni/新加卷/mern-stack/proShop/frontend/src/reducers/usersReducers.js":"1","/media/ni/新加卷/mern-stack/proShop/frontend/src/pages/OrderPage.jsx":"2","/media/ni/新加卷/mern-stack/proShop/frontend/src/reducers/productReducer.js":"3","/media/ni/新加卷/mern-stack/proShop/frontend/src/reducers/cartReducer.js":"4"},{"size":2337,"mtime":1607504792680,"results":"5","hashOfConfig":"6"},{"size":9049,"mtime":1607611888899,"results":"7","hashOfConfig":"6"},{"size":1494,"mtime":1607086795804,"results":"8","hashOfConfig":"6"},{"size":1603,"mtime":1607524178248,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wa2tu6",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/ni/新加卷/mern-stack/proShop/frontend/src/reducers/usersReducers.js",[],"/media/ni/新加卷/mern-stack/proShop/frontend/src/pages/OrderPage.jsx",["19","20"],"import React, { Suspense, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { PayPalButton } from 'react-paypal-button-v2';\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n//component\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\n//action\nimport { getOrderDetails, payOrder } from '../actions/orderAction';\nimport { ORDER_PAY_RESET } from '../constants/orderConstants';\n\nconst OrderPage = ({ match }) => {\n    const orderId = match.params.id;\n    const dispatch = useDispatch();\n\n    const [sdkReady, setSdkReady] = useState(false);\n\n    const orderDetails = useSelector((state) => state.orderDetails);\n    const { order, loading, error } = orderDetails;\n    const orderPay = useSelector((state) => state.orderPay);\n    const { success, loading: loadingPay } = orderPay;\n\n    useEffect(() => {\n        const addPayPalScript = async () => {\n            const { data: clientId } = await axios.get('/api/config/paypal');\n            const script = document.createElement('script');\n            script.type = 'text/javascript';\n            script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n            script.async = true;\n            script.onload = () => {\n                setSdkReady(true);\n            };\n            document.body.appendChild(script);\n        };\n\n        if (!order || success) {\n            dispatch({type: ORDER_PAY_RESET})\n            dispatch(getOrderDetails(orderId));\n        } else if (!order.isPaid) {\n            addPayPalScript();\n        } else {\n            setSdkReady(true);\n        }\n    }, [dispatch, orderId, success, order]);\n\n    //______________fonction____________________\n    //calculate price:\n    if (!loading) {\n        order.itemsPrice = order.orderItems\n            .reduce((acc, e) => acc + e.price * e.qty, 0)\n            .toFixed(2);\n    }\n\n    const successPaymentHandler = (paymentResult) => {\n        console.log(\n            '🚀 ~ file: OrderPage.jsx ~ line 55 ~ successPaymentHandler ~ paymentResult vient de paypal',\n            paymentResult\n        );\n        dispatch(payOrder(orderId, paymentResult));\n    };\n\n    return loading ? (\n        <Loader />\n    ) : error ? (\n        <Message>{error}</Message>\n    ) : (\n        <>\n            <h1>Order {order._id}</h1>\n            <Row>\n                <Col md={8}>\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <h2>Shipping</h2>\n                            <p>\n                                <strong>Name:</strong> {order.user.name}\n                            </p>\n                            <p>\n                                <strong>Email :</strong>\n                                <a href={`mailto:${order.user.email}`}>\n                                    {order.user.email}\n                                </a>\n                            </p>\n                            <p>\n                                <strong>Address</strong>\n                                {order.shippingAdress.adress},\n                                {order.shippingAdress.city}\n                                {order.shippingAdress.postalCode},\n                                {order.shippingAdress.country}\n                            </p>\n                            {order.isDelivered ? (\n                                <Message variant=\"success\">\n                                    Delivered on {order.deliveredAt}\n                                </Message>\n                            ) : (\n                                <Message variant=\"danger\">\n                                    Not Delivered !\n                                </Message>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Payement Method</h2>\n                            <p>\n                                <strong>Method:</strong>\n                                {order.paymentMethod &&\n                                    order.paymentMethod.paymentMethod}\n                            </p>\n                            {order.isPaid ? (\n                                <Message variant=\"success\">\n                                    Paid on {order.paidAt}\n                                </Message>\n                            ) : (\n                                <Message variant=\"danger\">Not paid !</Message>\n                            )}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <h2>Order Item</h2>\n                            {order.orderItems.length === 0 ? (\n                                <Message>Order is empty</Message>\n                            ) : (\n                                <ListGroup variant=\"flush\">\n                                    {order.orderItems.map((item, index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={1}>\n                                                    <Image\n                                                        src={item.image}\n                                                        alt={item.name}\n                                                        fluid\n                                                        rounded\n                                                    />\n                                                </Col>\n                                                <Col>\n                                                    <Link\n                                                        to={`/product/${item.product}`}\n                                                    >\n                                                        {item.name}\n                                                    </Link>\n                                                </Col>\n                                                <Col md={4}>\n                                                    {item.qty} x ${item.price} ={' '}\n                                                    {(\n                                                        item.qty * item.price\n                                                    ).toFixed(2)}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                                <h2>Order Summary</h2>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Items</Col>\n                                    <Col>${order.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Shipping</Col>\n                                    <Col>${order.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Tax</Col>\n                                    <Col>${order.taxePrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Total</Col>\n                                    <Col>${order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n                            {!order.isPaid && (\n                                <ListGroup.Item>\n                                    {loadingPay && <Loader></Loader>}\n                                    {!sdkReady ? (\n                                        <Loader></Loader>\n                                    ) : (\n                                        <PayPalButton\n                                            amount={order.totalPrice}\n                                            onSuccess={successPaymentHandler}\n                                        />\n                                    )}\n                                </ListGroup.Item>\n                            )}\n                        </ListGroup>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default OrderPage;\n","/media/ni/新加卷/mern-stack/proShop/frontend/src/reducers/productReducer.js",[],"/media/ni/新加卷/mern-stack/proShop/frontend/src/reducers/cartReducer.js",[],{"ruleId":"21","severity":1,"message":"22","line":1,"column":17,"nodeType":"23","messageId":"24","endLine":1,"endColumn":25},{"ruleId":"21","severity":1,"message":"25","line":5,"column":10,"nodeType":"23","messageId":"24","endLine":5,"endColumn":16},"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used."]